// Original Code Copyright (C) 2003, 2004 Jason Bevins
// Unreal Adaptation (C) 2016 Matthew Hamlin
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 2.1 of the License, or (at
// your option) any later version.
//
// This library is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
// License (COPYING.txt) for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// Original Developers Email jlbevins@gmail.com
// Email: DarkTreePrd@gmail.com
//

#pragma once

#include "NoiseModule.h"
#include "Cache.generated.h"

/// @addtogroup UnrealLibNoise
/// @{

/// @addtogroup modules
/// @{

/// @defgroup miscmodules Miscellaneous Modules
/// @addtogroup miscmodules
/// @{

/// Noise module that caches the last output value generated by a source
/// module.
///
/// If an application passes an input value to the GetValue() method that
/// differs from the previously passed-in input value, this noise module
/// instructs the source module to calculate the output value.  This
/// value, as well as the ( @a x, @a y, @a z ) coordinates of the input
/// value, are stored (cached) in this noise module.
///
/// If the application passes an input value to the GetValue() method
/// that is equal to the previously passed-in input value, this noise
/// module returns the cached output value without having the source
/// module recalculate the output value.
///
/// If an application passes a new source module to the SetSourceModule()
/// method, the cache is invalidated.
///
/// Caching a noise module is useful if it is used as a source module for
/// multiple noise modules.  If a source module is not cached, the source
/// module will redundantly calculate the same output value once for each
/// noise module in which it is included.
///
/// This noise module requires one source module.
UCLASS(BlueprintType)
class UNREALLIBNOISE_API UCache : public UNoiseModule
{
	GENERATED_BODY()
	

public:

	UCache(const FObjectInitializer& ObjectInit = FObjectInitializer::Get());

	FORCEINLINE virtual int32 GetSourceModuleCount() const override
	{
		return 1;
	}

	virtual float GetValue(FVector Coordinates) override;

	
	FORCEINLINE virtual void SetSourceModule(int32 index, UNoiseModule* sourceModule) override
	{
		SetSourceModule(index, sourceModule);
		IsCached = false;
	}

protected:

	/// The cached output value at the cached input value.
	mutable float CachedValue;

	/// Determines if a cached output value is stored in this noise
	/// module.
	mutable float IsCached;

	/// @a x coordinate of the cached input value.
	mutable float xCache;

	/// @a y coordinate of the cached input value.
	mutable float yCache;

	/// @a z coordinate of the cached input value.
	mutable float zCache;
	
	
};

/// @}

/// @}

/// @}